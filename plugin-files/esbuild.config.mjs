import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const BUILD_CONFIG = {
    banner: `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/`,
    entryPoints: ['main.ts'],
    outfile: 'main.js',
    format: 'cjs',
    target: 'es2018',
    logLevel: 'info'
};

const EXTERNAL_DEPENDENCIES = [
    'obsidian',
    'electron',
    '@codemirror/autocomplete',
    '@codemirror/collab',
    '@codemirror/commands',
    '@codemirror/language',
    '@codemirror/lint',
    '@codemirror/search',
    '@codemirror/state',
    '@codemirror/view',
    '@lezer/common',
    '@lezer/highlight',
    '@lezer/lr',
    ...builtins
];

function isProductionBuild() {
    return process.argv[2] === 'production';
}

function createBuildContext(isProduction) {
    return esbuild.context({
        banner: {
            js: BUILD_CONFIG.banner,
        },
        entryPoints: BUILD_CONFIG.entryPoints,
        bundle: true,
        external: EXTERNAL_DEPENDENCIES,
        outfile: BUILD_CONFIG.outfile,
        format: BUILD_CONFIG.format,
        target: BUILD_CONFIG.target,
        logLevel: BUILD_CONFIG.logLevel,
        sourcemap: isProduction ? false : 'inline',
        treeShaking: true,
        minify: isProduction,
    });
}

async function main() {
    const isProduction = isProductionBuild();
    const context = await createBuildContext(isProduction);

    if (isProduction) {
        await context.rebuild();
        process.exit(0);
    } else {
        await context.watch();
    }
}

main();