name: Build and Release

on:
  push:
    branches:
      - master
      - release
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for GitVersion
        
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.1.0
        with:
          versionSpec: '6.4.0'
          
      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v4.1.0
        id: gitversion
        
      - name: Display GitVersion outputs
        run: |
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'plugin-files/package-lock.json'
          
      - name: Update manifest version
        run: |
          cd plugin-files
          # Update manifest.json with GitVersion
          jq --arg version "${{ steps.gitversion.outputs.semVer }}" '.version = $version' manifest.json > tmp.json && mv tmp.json manifest.json
          echo "Updated manifest.json version to ${{ steps.gitversion.outputs.semVer }}"
          cat manifest.json
          
      - name: Install dependencies
        run: |
          cd plugin-files
          npm ci
          
      - name: Build plugin
        run: |
          cd plugin-files
          npm run build
          
      - name: Verify build outputs
        run: |
          cd plugin-files
          ls -la main.js manifest.json
          echo "Build verification complete"
          
      - name: Create release archive
        run: |
          cd plugin-files
          mkdir -p ../release
          cp main.js manifest.json ../release/
          cd ../release
          zip -r obsidian-ai-readme-unhide-v${{ steps.gitversion.outputs.semVer }}.zip .
          
      - name: Check if version already exists
        id: check_release
        run: |
          if gh release view "v${{ steps.gitversion.outputs.semVer }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Release
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.gitversion.outputs.semVer }}
          release_name: Release v${{ steps.gitversion.outputs.semVer }}
          
      - name: Upload Release Archive
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/obsidian-ai-readme-unhide-v${{ steps.gitversion.outputs.semVer }}.zip
          asset_name: obsidian-ai-readme-unhide-v${{ steps.gitversion.outputs.semVer }}.zip
          asset_content_type: application/zip
          
      - name: Upload main.js
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./plugin-files/main.js
          asset_name: main.js
          asset_content_type: application/javascript
          
      - name: Upload manifest.json
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./plugin-files/manifest.json
          asset_name: manifest.json
          asset_content_type: application/json
          
      - name: Log Release Status
        run: |
          if [ "${{ steps.check_release.outputs.exists }}" == "true" ]; then
            echo "Release v${{ steps.gitversion.outputs.semVer }} already exists, skipping creation"
          else
            echo "Successfully created release v${{ steps.gitversion.outputs.semVer }}"
          fi